import os

from utils import write_template, cleaner, update_includes, relative_path, find_path, touch, 

@cleaner
def startapp(name):
    make_component(name)
    make_redux(name)
    update_store(name)
    update_reducer(name)

def make_component(name):
    fname = .format(name=name)
    "creating components/index" |> print
    os.makedirs('./{name}/components' |> fname)
    main_file = './{name}/components/index.js' |> fname 
    touch(main_file)
    merge_action_path = find_path(main_file, 'mergeActions') 
    write_template(main_file, "redux_component", {"name": name, 'merge_action_path': merge_action_path, "cap_name": name.capitalize()})


def make_redux(name):
    fname = .format(name=name)
    os.makedirs('./{name}/redux' |> fname)
    os.makedirs('./{name}/redux/actions' |> fname)
    os.makedirs('./{name}/redux/reducers' |> fname)
    "creating redux/reducers/index" |> print
    write_template('./{name}/redux/reducers/index.js' |> fname, "mainReducer", {"cap_name": name.capitalize()})

    "creating redux/select" |> print
    select_file = './{name}/redux/select.js' |> fname
    touch(select_file)
    store_type_path = find_path(select_file, 'store.flow.js')
    write_template(select_file, "select", {"name": name, 'store_type_path': store_type_path, "cap_name": name.capitalize() })

    "creating redux/state" |> print
    write_template('./{name}/redux/state.js' |> fname, "state", {"name": name, "cap_name": name.capitalize()})
    "creating redux/actions/index" |> print
    write_template('./{name}/redux/actions/index.js' |> fname, "mainAction", {"name": name, "cap_name": name.capitalize()})


def update_store(name):
    "updating store.flow" |> print
    cap_name = name.capitalize()
    store_file = relative_path("store.flow.js")
    rel_path = find_path("store.flow.js", "%s/redux/state" % name)
    new_import = "import type {{ ${cap_name} }} from '{path}'\n".format(cap_name=cap_name, path=rel_path)
    new_line = "  {name}: ${cap_name},\n".format(name=name, cap_name=cap_name)
    update_includes(store_file, new_import, new_line, pattern="export type")


def update_reducer(name): 
    "updating reducer" |> print
    reducers_file = relative_path("store/reducers")
    rel_path = os.path.dirname(find_path("store/reducers", "%s/redux/reducers/index" % name))
    new_import = "import {name} from '{path}'\n".format(name=name, path=rel_path)
    new_line = "  {name},\n".format(name=name)
    update_includes(reducers_file, new_import, new_line)

