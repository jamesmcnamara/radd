import os

from constants import *
from snippets import get_snippets_for_template
from utils import write_template, cleaner, update_includes, relative_path, find_path, touch



@cleaner
def startapp(values, config):
    make_component(values, config)
    make_dux(values, config)
    update_store(values, config)
    update_reducer(values, config)

def make_component(values, config):
    name = values["name"]
    fname = .format(name=name)
    "creating components/index" |> print
    os.makedirs('./{name}/components' |> fname)
    main_file = './{name}/components/index.js' |> fname 
    touch(main_file)
    write_template(main_file, DUX_COMPONENT, values, config)


def make_dux(values, config):
    use_constants = config["constants"]
    name = values["name"]
    fname = .format(name=name)
    os.makedirs('./{name}/state' |> fname)
    os.makedirs('./{name}/state/dux' |> fname)
    main_file = './{name}/state/dux/index.js' |> fname
    "creating %s" % main_file |> print
    write_template(main_file, DUX_MAIN_CONSTANTS if use_constants else DUX_MAIN, values, config)

    select_file = './{name}/state/select.js' |> fname
    "creating %s" % select_file |> print
    touch(select_file)
    # store_type_path = find_path(select_file, 'store.flow.js')
    write_template(select_file, SELECT, values, config)

    initial_state = './{name}/state/initialState.js' |> fname
    "creating %s" % initial_state |> print
    write_template(initial_state, STATE, values, config)

    actions_file = './{name}/state/dux/actions.js' |> fname
    "creating %s" % actions_file |> print
    write_template(actions_file, ACTIONS, values, config) 

    if use_constants:
        constants_file = './{name}/state/dux/constants.js' |> fname
        "creating %s" % constants_file |> print
        write_template(constants_file, CONSTANTS, values, config) 
        



def update_store(values, config):
    if not config["flow"]:
        return
    "updating %s" % config["store_type_path"] |> print
    new_import = get_snippet(STORE_FLOW_INCLUDE, values, config)
    new_line = get_snippet(STORE_FLOW_ANNOTATION, values, config) 
    update_includes(config["store_type_path"], new_import, new_line, pattern="export type")


def update_reducer(values, config): 
    reducers_file = os.path.join(config["store_dir"], config["reducers_file"])
    "updating %s" % reducers_file |> print
    
    reducer_name = values["name"][0].lower() + values["name"][1:]
    new_import = "import {reducer_name} from '{store_to_module_path}'\n".format(**values, reducer_name=reducer_name)
    new_line = "  {reducer_name},\n".format(**values, reducer_name=reducer_name)
    update_includes(reducers_file, new_import, new_line)

